{"version":3,"sources":["../src/ascii-data-table.js"],"names":[],"mappings":"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","file":"ascii-data-table.js","sourcesContent":["const getArray = (len) => Array.apply(null, Array(len)).map((_, i) => i)\n\nconst stringifyVal = (val) => {\n  if (Array.isArray(val)) return stringifyArray(val)\n  if (typeof val === 'number') return val\n  if (typeof val === 'string') return val\n  if (typeof val === 'boolean') return val\n  if (val === null) return '(null)'\n  if (typeof val === 'object') return stringifyObject(val)\n}\n\nconst stringifyArray = (arr) => '[' + arr.map(stringifyVal).join(', ') + ']'\n\nconst stringifyObject = (obj) => {\n  if (typeof obj !== 'object') return obj\n  return '{' + Object.keys(obj).map((key) => key + ': ' + stringifyVal(obj[key])).join(', ') + '}'\n}\n\nconst stringifyLines = (rows) => {\n  if (!Array.isArray(rows) || !rows.length) return []\n  return rows.map((row) => row.map(stringifyVal))\n}\n\nconst getRowIndexForLine = (rowHeights, lineNumber) => {\n  return rowHeights.reduce((meta, height, rowIndex) => {\n    if (meta.remainingLines < 0) return meta\n    meta.rowIndex = rowIndex\n    if (meta.remainingLines < height) {\n      meta.lineIndex = meta.remainingLines\n    }\n    meta.remainingLines = meta.remainingLines - height\n    return meta\n  }, {\n    rowIndex: 0,\n    lineIndex: 0,\n    remainingLines: lineNumber\n  })\n}\n\nconst getLineFromCol = (prev, _, colIndex) => {\n  const linesStr = prev.colsLines[prev.rowIndex][colIndex]\n    .filter((_, lineIndex) => lineIndex === prev.lineIndex)\n    .map((line) => line + padString(' ', prev.colWidths[colIndex] - line.length))\n  prev.lines.push(linesStr)\n  return prev\n}\n\nconst getColLines = (col, colWidth, rowHeight) => {\n  let colLines = getLinesFromString(col).reduce((final, curr) => {\n    return final.concat(('' + curr).match(new RegExp('.{1,' + colWidth + '}', 'g')) || [''])\n  }, [])\n  return colLines.concat(getArray(rowHeight - colLines.length).map((a) => ' '))\n}\n\nconst getLinesFromString = (str) => {\n  if (typeof str !== 'string') return [str]\n  return str.indexOf('\\n') > -1 ? str.split('\\n') : [str]\n}\n\nconst getColWidths = (rows) => {\n  return getArray(rows[0].length).map((i) => {\n    return rows.reduce((prev, curr) => {\n      const lines = getLinesFromString(curr[i])\n      const currMax = lines.reduce((max, line) => {\n        return Math.max(max, ('' + line).length)\n      }, 0)\n      return Math.max(prev, currMax)\n    }, 0)\n  })\n}\n\nconst renderForWidth = (rows, maxColWidth = 30, minColWidth = 3) => {\n  if (!Array.isArray(rows) || !rows.length) return ''\n  const colWidths = getColWidths(rows).map((colWidth) => {\n    return Math.max(Math.min(colWidth, maxColWidth), minColWidth)\n  })\n  const rowHeights = rows.map((row) => {\n    return row.reduce((prev, curr, colIndex) => {\n      const lines = getLinesFromString(curr)\n      return lines.reduce((tot, line) => {\n        return tot + Math.max(1, Math.max(prev, Math.ceil(('' + line).length / colWidths[colIndex])))\n      }, 0)\n    }, 0)\n  })\n  const totalLines = rowHeights.reduce((tot, curr) => tot + curr, 0)\n  const colsLines = rows.reduce((colLines, row, rowIndex) => {\n    const cols = row.map((col, colIndex) => getColLines(col, colWidths[colIndex], rowHeights[rowIndex]))\n    return colLines.concat([cols])\n  }, [])\n  let output = getArray(totalLines).reduce((out, _, i) => {\n    const lineMeta = getRowIndexForLine(rowHeights, i)\n    const rowLines = rows[lineMeta.rowIndex].reduce(getLineFromCol, {\n      lines: [],\n      lineIndex: lineMeta.lineIndex,\n      colWidths: colWidths,\n      colsLines: colsLines,\n      rowIndex: lineMeta.rowIndex\n    }).lines.join('│')\n    out.push('│' + rowLines + '│')\n    return out\n  }, [])\n  output = insertRowSeparators(output, rowHeights, colWidths)\n  return output.join('\\n')\n}\n\nconst insertRowSeparators = (lines, rowHeights, colWidths) => {\n  return rowHeights.reduce((out, rowHeight, rowIndex) => {\n    out.curr.push.apply(out.curr, out.feeder.splice(0, rowHeight))\n    if (rowIndex === 0) {\n      out.curr.push(getThickSeparatorLine(colWidths))\n    } else if (rowIndex === rowHeights.length - 1) {\n      out.curr.push(getBottomSeparatorLine(colWidths))\n    } else {\n      out.curr.push(getThinSeparatorLine(colWidths))\n    }\n    return out\n  }, {\n    feeder: lines,\n    curr: [getTopSeparatorLine(colWidths)]\n  }).curr\n}\n\nconst getTopSeparatorLine = (colWidths) => getSeparatorLine('═', '╒', '╤', '╕', colWidths)\nconst getThickSeparatorLine = (colWidths) => getSeparatorLine('═', '╞', '╪', '╡', colWidths)\nconst getThinSeparatorLine = (colWidths) => getSeparatorLine('─', '├', '┼', '┤', colWidths)\nconst getBottomSeparatorLine = (colWidths) => getSeparatorLine('─', '└', '┴', '┘', colWidths)\nconst getSeparatorLine = (horChar, leftChar, crossChar, rightChar, colWidths) => {\n  return leftChar + colWidths.map(function (w) {\n    return padString(horChar, w)\n  }).join(crossChar) + rightChar\n}\n\nconst padString = (character, width) => {\n  if (width < 1) return ''\n  return getArray(width).map(() => character).join('')\n}\n\nexport default {\n  run: (rows, options = {maxColumnWidth: 30}) => renderForWidth(stringifyLines(rows), options.maxColumnWidth),\n  getMaxColumnWidth: (rows) => getColWidths(stringifyLines(rows)).reduce((max, colWidth) => Math.max(max, colWidth), 0)\n}\n\n"]}